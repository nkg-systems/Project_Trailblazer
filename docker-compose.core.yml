services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fieldops-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fieldops_optimizer}
      POSTGRES_USER: ${POSTGRES_USER:-fieldops_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fieldops_user -d fieldops_optimizer"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fieldops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: fieldops-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-fieldops_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: fieldops
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # OSRM Route Engine (OpenStreetMap routing) - Skip data initialization for now
  osrm:
    image: osrm/osrm-backend:latest
    container_name: fieldops-osrm
    ports:
      - "5000:5000"
    volumes:
      - osrm_data:/data
    # Using a demo dataset that's pre-built
    command: |
      sh -c "
        if [ ! -f /data/map.osrm ]; then
          echo 'No OSRM data found. Please run OSRM initialization manually or use the full docker-compose.yml';
          exit 1;
        fi
        osrm-routed --algorithm mld /data/map.osrm
      "
    restart: unless-stopped
    profiles:
      - routing  # Only start when routing profile is specified

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: fieldops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: fieldops-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Seq (Structured Logging)
  seq:
    image: datalust/seq:latest
    container_name: fieldops-seq
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINPASSWORD=${SEQ_ADMIN_PASSWORD}
    volumes:
      - seq_data:/data
    restart: unless-stopped
    profiles:
      - logging

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: fieldops-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    profiles:
      - tracing

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  osrm_data:
  prometheus_data:
  grafana_data:
  seq_data:

networks:
  default:
    name: fieldops-network
