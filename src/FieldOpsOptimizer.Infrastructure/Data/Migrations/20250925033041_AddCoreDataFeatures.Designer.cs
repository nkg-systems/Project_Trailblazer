// <auto-generated />
using System;
using FieldOpsOptimizer.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FieldOpsOptimizer.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250925033041_AddCoreDataFeatures")]
    partial class AddCoreDataFeatures
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.JobNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Name of the user who created the note (cached for performance)");

                    b.Property<string>("AuthorRole")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Role/position of the note author at time of creation");

                    b.Property<Guid>("AuthorUserId")
                        .HasColumnType("uuid")
                        .HasComment("ID of the user who created the note");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasComment("Note content (encrypted in production using AES-256)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When the note was soft deleted");

                    b.Property<Guid?>("DeletedByUserId")
                        .HasColumnType("uuid")
                        .HasComment("User ID who deleted the note");

                    b.Property<string>("DeletedByUserName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Name of user who deleted the note");

                    b.Property<string>("DeletionReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Reason for deletion");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasComment("IP address of the user who created the note (for audit trail)");

                    b.Property<bool>("IsCustomerVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Whether this note should be visible to customers");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Whether this note has been soft deleted");

                    b.Property<bool>("IsSensitive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Whether this note contains sensitive information");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Concurrency token for optimistic locking");

                    b.Property<Guid>("ServiceJobId")
                        .HasColumnType("uuid")
                        .HasComment("ID of the service job this note belongs to");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("Session ID when the note was created");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Tenant ID for multi-tenant isolation");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Type of note determining visibility and purpose");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("User agent of the client that created the note");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_JobNotes_TenantId");

                    b.HasIndex("CreatedAt", "TenantId")
                        .HasDatabaseName("IX_JobNotes_CreatedAt_Tenant");

                    b.HasIndex("AuthorUserId", "TenantId", "IsDeleted")
                        .HasDatabaseName("IX_JobNotes_Author_Tenant_Deleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("IsDeleted", "DeletedAt", "TenantId")
                        .HasDatabaseName("IX_JobNotes_SoftDelete")
                        .HasFilter("IsDeleted = 1");

                    b.HasIndex("ServiceJobId", "TenantId", "IsDeleted")
                        .HasDatabaseName("IX_JobNotes_ServiceJob_Tenant_Deleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("Type", "TenantId", "IsDeleted")
                        .HasDatabaseName("IX_JobNotes_Type_Tenant_Deleted")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("ServiceJobId", "IsCustomerVisible", "IsSensitive", "IsDeleted")
                        .HasDatabaseName("IX_JobNotes_CustomerVisible")
                        .HasFilter("IsCustomerVisible = 1 AND IsSensitive = 0 AND IsDeleted = 0");

                    b.ToTable("JobNotes", null, t =>
                        {
                            t.HasComment("Notes attached to service jobs with full audit trail and security features");
                        });
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.JobStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppliedBusinessRules")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasComment("Business rules that were applied during this status change");

                    b.Property<string>("ChangeSource")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Source system or component that triggered the change");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When the status change occurred (separate from audit timestamps)");

                    b.Property<Guid>("ChangedByUserId")
                        .HasColumnType("uuid")
                        .HasComment("ID of the user who made the status change");

                    b.Property<string>("ChangedByUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Name of the user who made the status change (cached for performance)");

                    b.Property<string>("ChangedByUserRole")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Role of the user at the time of the change");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FromStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The status before the change");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasComment("IP address from which the change was made");

                    b.Property<bool>("IsAutomaticChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Whether this was an automatic status change (vs manual)");

                    b.Property<string>("JobNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Job number for easier identification in logs and reports");

                    b.Property<int?>("PreviousStatusDurationMinutes")
                        .HasColumnType("integer")
                        .HasComment("Duration the job was in the previous status (in minutes)");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Optional reason or comment for the status change");

                    b.Property<Guid>("ServiceJobId")
                        .HasColumnType("uuid")
                        .HasComment("ID of the service job whose status changed");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasComment("Session ID when the change was made");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Tenant ID for multi-tenant isolation");

                    b.Property<string>("ToStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The status after the change");

                    b.Property<bool>("TriggeredNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Whether this status change triggered any business rules or notifications");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("User agent of the client that made the change");

                    b.Property<string>("ValidationWarnings")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasComment("Any validation warnings that occurred during the status change");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_JobStatusHistory_TenantId");

                    b.HasIndex("ChangedAt", "TenantId")
                        .HasDatabaseName("IX_JobStatusHistory_ChangedAt_Tenant");

                    b.HasIndex("ServiceJobId", "ChangedAt")
                        .HasDatabaseName("IX_JobStatusHistory_ServiceJob_ChangedAt");

                    b.HasIndex("ChangeSource", "IsAutomaticChange", "TenantId")
                        .HasDatabaseName("IX_JobStatusHistory_Source_Auto_Tenant")
                        .HasFilter("ChangeSource IS NOT NULL");

                    b.HasIndex("ChangedByUserId", "TenantId", "ChangedAt")
                        .HasDatabaseName("IX_JobStatusHistory_User_Tenant_ChangedAt");

                    b.HasIndex("IsAutomaticChange", "TenantId", "ChangedAt")
                        .HasDatabaseName("IX_JobStatusHistory_AutoChange_Tenant_ChangedAt");

                    b.HasIndex("JobNumber", "TenantId", "ChangedAt")
                        .HasDatabaseName("IX_JobStatusHistory_JobNumber_Tenant_ChangedAt");

                    b.HasIndex("PreviousStatusDurationMinutes", "FromStatus", "TenantId")
                        .HasDatabaseName("IX_JobStatusHistory_Duration_Status_Tenant")
                        .HasFilter("PreviousStatusDurationMinutes IS NOT NULL");

                    b.HasIndex("TriggeredNotifications", "TenantId", "ChangedAt")
                        .HasDatabaseName("IX_JobStatusHistory_Notifications_Tenant_ChangedAt")
                        .HasFilter("TriggeredNotifications = 1");

                    b.HasIndex("ValidationWarnings", "AppliedBusinessRules", "TenantId")
                        .HasDatabaseName("IX_JobStatusHistory_Warnings_Rules_Tenant")
                        .HasFilter("ValidationWarnings IS NOT NULL OR AppliedBusinessRules IS NOT NULL");

                    b.HasIndex("FromStatus", "ToStatus", "TenantId", "ChangedAt")
                        .HasDatabaseName("IX_JobStatusHistory_StatusTransition_Tenant_ChangedAt");

                    b.ToTable("JobStatusHistory", null, t =>
                        {
                            t.HasComment("Complete history of status changes for service jobs with comprehensive audit information");
                        });
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignedTechnicianId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("interval");

                    b.Property<double>("EstimatedFuelSavings")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("EstimatedTimeSavings")
                        .HasColumnType("interval");

                    b.Property<bool>("IsOptimized")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("OptimizationAlgorithm")
                        .HasColumnType("integer");

                    b.Property<string>("OptimizationObjective")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("TotalDistanceKm")
                        .HasPrecision(10, 3)
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTechnicianId");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.RouteStop", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DistanceFromPreviousKm")
                        .HasPrecision(10, 3)
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("EstimatedArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("EstimatedTravelTime")
                        .HasColumnType("interval");

                    b.Property<Guid?>("RouteId1")
                        .HasColumnType("uuid");

                    b.Property<int>("SequenceOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("JobId", "RouteId");

                    b.HasIndex("EstimatedArrival");

                    b.HasIndex("RouteId");

                    b.HasIndex("RouteId1");

                    b.HasIndex("SequenceOrder");

                    b.ToTable("RouteStop");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.ServiceJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedTechnicianId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("interval");

                    b.Property<decimal>("EstimatedRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("JobNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("JobType")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<TimeSpan?>("PreferredTimeWindow")
                        .HasColumnType("interval");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RequiredSkills")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("TechnicianId")
                        .HasColumnType("uuid");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTechnicianId");

                    b.HasIndex("Priority");

                    b.HasIndex("RouteId");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("Status");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("TenantId");

                    b.HasIndex("JobNumber", "TenantId")
                        .IsUnique();

                    b.ToTable("ServiceJobs");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.Technician", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AvailabilityChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When the technician's availability status was last changed");

                    b.Property<Guid?>("AvailabilityChangedByUserId")
                        .HasColumnType("uuid")
                        .HasComment("User ID who last changed the technician's availability");

                    b.Property<string>("AvailabilityChangedByUserName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Name of user who last changed the technician's availability");

                    b.Property<string>("AvailabilityNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Additional notes about current availability status");

                    b.Property<bool>("CanTakeEmergencyJobs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("Whether the technician can be assigned emergency jobs even when unavailable");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ExpectedAvailableAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Expected time when technician will be available again (if currently unavailable)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("HourlyRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("IsCurrentlyAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("Whether the technician is currently available for new job assignments");

                    b.Property<DateTime?>("LastLocationUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("MaxConcurrentJobs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3)
                        .HasComment("Maximum number of concurrent jobs this technician can handle");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasComment("Row version for optimistic concurrency control");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UnavailabilityReason")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Reason for current unavailability (if applicable)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Technicians_Email");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Technicians_Status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Technicians_TenantId");

                    b.HasIndex("AvailabilityChangedAt", "TenantId")
                        .HasDatabaseName("IX_Technicians_AvailabilityChanged_Tenant");

                    b.HasIndex("EmployeeId", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("IX_Technicians_EmployeeId_TenantId_Unique");

                    b.HasIndex("CanTakeEmergencyJobs", "Status", "TenantId")
                        .HasDatabaseName("IX_Technicians_Emergency_Status_Tenant")
                        .HasFilter("CanTakeEmergencyJobs = 1 AND Status = 'Active'");

                    b.HasIndex("IsCurrentlyAvailable", "Status", "TenantId")
                        .HasDatabaseName("IX_Technicians_Available_Status_Tenant")
                        .HasFilter("Status = 'Active'");

                    b.HasIndex("MaxConcurrentJobs", "IsCurrentlyAvailable", "TenantId")
                        .HasDatabaseName("IX_Technicians_Capacity_Available_Tenant")
                        .HasFilter("IsCurrentlyAvailable = 1");

                    b.HasIndex("UnavailabilityReason", "ExpectedAvailableAt", "TenantId")
                        .HasDatabaseName("IX_Technicians_Unavailable_Expected_Tenant")
                        .HasFilter("IsCurrentlyAvailable = 0 AND ExpectedAvailableAt IS NOT NULL");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("TechnicianId")
                        .HasColumnType("uuid");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("RefreshToken")
                        .HasDatabaseName("IX_Users_RefreshToken");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.HasIndex("TenantId", "Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_TenantId_Username");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.JobNote", b =>
                {
                    b.HasOne("FieldOpsOptimizer.Domain.Entities.ServiceJob", "ServiceJob")
                        .WithMany()
                        .HasForeignKey("ServiceJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobNotes_ServiceJobs");

                    b.Navigation("ServiceJob");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.JobStatusHistory", b =>
                {
                    b.HasOne("FieldOpsOptimizer.Domain.Entities.ServiceJob", "ServiceJob")
                        .WithMany()
                        .HasForeignKey("ServiceJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobStatusHistory_ServiceJobs");

                    b.Navigation("ServiceJob");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.Route", b =>
                {
                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Technician", "AssignedTechnician")
                        .WithMany()
                        .HasForeignKey("AssignedTechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedTechnician");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.RouteStop", b =>
                {
                    b.HasOne("FieldOpsOptimizer.Domain.Entities.ServiceJob", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Route", "Route")
                        .WithMany("_stops")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Route", null)
                        .WithMany("Stops")
                        .HasForeignKey("RouteId1");

                    b.Navigation("Job");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.ServiceJob", b =>
                {
                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Technician", "AssignedTechnician")
                        .WithMany()
                        .HasForeignKey("AssignedTechnicianId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Technician", null)
                        .WithMany("ServiceJobs")
                        .HasForeignKey("TechnicianId");

                    b.OwnsOne("FieldOpsOptimizer.Domain.ValueObjects.Address", "ServiceAddress", b1 =>
                        {
                            b1.Property<Guid>("ServiceJobId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasDefaultValue("US");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("Unit")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("ServiceJobId");

                            b1.ToTable("ServiceJobs");

                            b1.WithOwner()
                                .HasForeignKey("ServiceJobId");

                            b1.OwnsOne("FieldOpsOptimizer.Domain.ValueObjects.Coordinate", "Coordinate", b2 =>
                                {
                                    b2.Property<Guid>("AddressServiceJobId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("Latitude")
                                        .HasPrecision(10, 7)
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Longitude")
                                        .HasPrecision(10, 7)
                                        .HasColumnType("double precision");

                                    b2.HasKey("AddressServiceJobId");

                                    b2.ToTable("ServiceJobs");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressServiceJobId");
                                });

                            b1.Navigation("Coordinate");
                        });

                    b.Navigation("AssignedTechnician");

                    b.Navigation("Route");

                    b.Navigation("ServiceAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.Technician", b =>
                {
                    b.OwnsOne("FieldOpsOptimizer.Domain.ValueObjects.Coordinate", "CurrentLocation", b1 =>
                        {
                            b1.Property<Guid>("TechnicianId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasPrecision(10, 7)
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasPrecision(10, 7)
                                .HasColumnType("double precision");

                            b1.HasKey("TechnicianId");

                            b1.ToTable("Technicians");

                            b1.WithOwner()
                                .HasForeignKey("TechnicianId");
                        });

                    b.OwnsOne("FieldOpsOptimizer.Domain.ValueObjects.Address", "HomeAddress", b1 =>
                        {
                            b1.Property<Guid>("TechnicianId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("Unit")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("TechnicianId");

                            b1.ToTable("Technicians");

                            b1.WithOwner()
                                .HasForeignKey("TechnicianId");

                            b1.OwnsOne("FieldOpsOptimizer.Domain.ValueObjects.Coordinate", "Coordinate", b2 =>
                                {
                                    b2.Property<Guid>("AddressTechnicianId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("Latitude")
                                        .HasPrecision(10, 7)
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Longitude")
                                        .HasPrecision(10, 7)
                                        .HasColumnType("double precision");

                                    b2.HasKey("AddressTechnicianId");

                                    b2.ToTable("Technicians");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressTechnicianId");
                                });

                            b1.Navigation("Coordinate");
                        });

                    b.Navigation("CurrentLocation");

                    b.Navigation("HomeAddress");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.User", b =>
                {
                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.Route", b =>
                {
                    b.Navigation("Stops");

                    b.Navigation("_stops");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.Technician", b =>
                {
                    b.Navigation("ServiceJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
