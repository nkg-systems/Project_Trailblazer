// <auto-generated />
using System;
using FieldOpsOptimizer.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FieldOpsOptimizer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250901004936_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignedTechnicianId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OptimizationObjective")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("TotalDistanceKm")
                        .HasPrecision(10, 3)
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTechnicianId");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.RouteStop", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DistanceFromPreviousKm")
                        .HasPrecision(10, 3)
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("EstimatedArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("EstimatedTravelTime")
                        .HasColumnType("interval");

                    b.Property<Guid?>("RouteId1")
                        .HasColumnType("uuid");

                    b.Property<int>("SequenceOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("JobId", "RouteId");

                    b.HasIndex("EstimatedArrival");

                    b.HasIndex("RouteId");

                    b.HasIndex("RouteId1");

                    b.HasIndex("SequenceOrder");

                    b.ToTable("RouteStop");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.ServiceJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedTechnicianId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("interval");

                    b.Property<decimal>("EstimatedRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("JobNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<TimeSpan?>("PreferredTimeWindow")
                        .HasColumnType("interval");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RequiredSkills")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTechnicianId");

                    b.HasIndex("Priority");

                    b.HasIndex("RouteId");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.HasIndex("JobNumber", "TenantId")
                        .IsUnique();

                    b.ToTable("ServiceJobs");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.Technician", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("HourlyRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("LastLocationUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.HasIndex("EmployeeId", "TenantId")
                        .IsUnique();

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.Route", b =>
                {
                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Technician", "AssignedTechnician")
                        .WithMany()
                        .HasForeignKey("AssignedTechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedTechnician");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.RouteStop", b =>
                {
                    b.HasOne("FieldOpsOptimizer.Domain.Entities.ServiceJob", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Route", "Route")
                        .WithMany("_stops")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Route", null)
                        .WithMany("Stops")
                        .HasForeignKey("RouteId1");

                    b.Navigation("Job");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.ServiceJob", b =>
                {
                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Technician", "AssignedTechnician")
                        .WithMany()
                        .HasForeignKey("AssignedTechnicianId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FieldOpsOptimizer.Domain.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("FieldOpsOptimizer.Domain.ValueObjects.Address", "ServiceAddress", b1 =>
                        {
                            b1.Property<Guid>("ServiceJobId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasDefaultValue("US");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("Unit")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("ServiceJobId");

                            b1.ToTable("ServiceJobs");

                            b1.WithOwner()
                                .HasForeignKey("ServiceJobId");

                            b1.OwnsOne("FieldOpsOptimizer.Domain.ValueObjects.Coordinate", "Coordinate", b2 =>
                                {
                                    b2.Property<Guid>("AddressServiceJobId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("Latitude")
                                        .HasPrecision(10, 7)
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Longitude")
                                        .HasPrecision(10, 7)
                                        .HasColumnType("double precision");

                                    b2.HasKey("AddressServiceJobId");

                                    b2.ToTable("ServiceJobs");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressServiceJobId");
                                });

                            b1.Navigation("Coordinate");
                        });

                    b.Navigation("AssignedTechnician");

                    b.Navigation("Route");

                    b.Navigation("ServiceAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.Technician", b =>
                {
                    b.OwnsOne("FieldOpsOptimizer.Domain.ValueObjects.Coordinate", "CurrentLocation", b1 =>
                        {
                            b1.Property<Guid>("TechnicianId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasPrecision(10, 7)
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasPrecision(10, 7)
                                .HasColumnType("double precision");

                            b1.HasKey("TechnicianId");

                            b1.ToTable("Technicians");

                            b1.WithOwner()
                                .HasForeignKey("TechnicianId");
                        });

                    b.OwnsOne("FieldOpsOptimizer.Domain.ValueObjects.Address", "HomeAddress", b1 =>
                        {
                            b1.Property<Guid>("TechnicianId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("Unit")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("TechnicianId");

                            b1.ToTable("Technicians");

                            b1.WithOwner()
                                .HasForeignKey("TechnicianId");

                            b1.OwnsOne("FieldOpsOptimizer.Domain.ValueObjects.Coordinate", "Coordinate", b2 =>
                                {
                                    b2.Property<Guid>("AddressTechnicianId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("Latitude")
                                        .HasPrecision(10, 7)
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Longitude")
                                        .HasPrecision(10, 7)
                                        .HasColumnType("double precision");

                                    b2.HasKey("AddressTechnicianId");

                                    b2.ToTable("Technicians");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressTechnicianId");
                                });

                            b1.Navigation("Coordinate");
                        });

                    b.Navigation("CurrentLocation");

                    b.Navigation("HomeAddress");
                });

            modelBuilder.Entity("FieldOpsOptimizer.Domain.Entities.Route", b =>
                {
                    b.Navigation("Stops");

                    b.Navigation("_stops");
                });
#pragma warning restore 612, 618
        }
    }
}
